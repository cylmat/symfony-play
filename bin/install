#!/usr/bin/env bash

if [ $# -lt 1 ]; then echo "Usage : $0 <script-name>"; exit; fi

case "$1" in

"alias")
	alias run="bin/run" ;;

"all")
	$0 all-bin
	$0 composer-dev
	echo -e "\033[1;32m------------\n- All good -\n------------ \033[0m"
;;

###########
# INSTALL #
###########

"all-bin"|"all-bins")
	mkdir -p bin
	$0 csfixer
	$0 codeception
	$0 deptrac
	$0 infection
	$0 parallel
	$0 phan
	$0 phpmd
	$0 phpstan
	$0 psalm
# Utils
	$0 composer
	$0 deployer
	$0 kint
	$0 volta
	$0 node
	$0 symfony
	$0 local
	# $0 phing
	# $0 phive
	echo -e "\033[1;32m------------\n- All good -\n------------ \033[0m"
;;

# COMPOSER #

"composer-dev")
	test -e bin/composer || $0 composer-bin;
	cd lib && ../bin/composer install && cd -
	bin/composer install --dev
;;

"composer-nodev")
	bin/composer install --prefer-dist --no-progress --no-dev --no-scripts --no-plugins ;;

"local")
	[ ! -f ./.env.local ] && cp .env.local.dev.dist .env.local
	[ ! -f ./config/local/parameters.yaml ] && cp config/local/parameters.yaml.dist config/local/parameters.yaml
	git config credential.helper store
	chmod 777 -R var
;;

##########
# BINARY #
##########

### Tools

"codecept")
	curl -L https://codeception.com/codecept.phar -o bin/codecept
	chmod a+x bin/codecept
;;

"csfixer")
	curl -L https://cs.symfony.com/download/php-cs-fixer-v3.phar -o bin/php-cs-fixer
	chmod a+x bin/php-cs-fixer
;;

"deptrac")
	# apt update && apt-get install -y graphviz
	# curl -L https://github.com/qossmic/deptrac/releases/download/1.0.0/deptrac.phar -o bin/deptrac
	# chmod a+x bin/deptrac
	bin/composer req --dev deptrac/deptrac
;;

"infection")
	apt update && apt install -y gpg
	curl -L https://github.com/infection/infection/releases/download/0.26.6/infection.phar -o bin/infection
	curl -L https://github.com/infection/infection/releases/download/0.26.6/infection.phar.asc -o /tmp/infection.phar.asc
	gpg --recv-keys C6D76C329EBADE2FB9C458CFC5095986493B4AA0
	gpg --with-fingerprint --verify /tmp/infection.phar.asc bin/infection
	rm /tmp/infection.phar.asc
	chmod +x bin/infection
;;

"parallel")
	curl -L https://github.com/php-parallel-lint/PHP-Parallel-Lint/releases/download/v1.3.2/parallel-lint.phar -o bin/parallel-lint
	chmod +x bin/parallel-lint
;;

"phan")
	curl -L https://github.com/phan/phan/releases/download/5.4.1/phan.phar -o bin/phan
	chmod +x bin/phan
;;

"phpmd")
	curl -L https://github.com/phpmd/phpmd/releases/download/2.13.0/phpmd.phar -o bin/phpmd
	chmod a+x bin/phpmd
;;

"phpstan")
	curl -L https://github.com/phpstan/phpstan/releases/download/1.8.6/phpstan.phar -o bin/phpstan
	chmod a+x bin/phpstan
;;

"psalm")
	curl -L https://github.com/vimeo/psalm/releases/latest/download/psalm.phar -o bin/psalm
	chmod +x bin/psalm
;;

### Utils

# @see https://getcomposer.org
"composer")
	EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
    php -r "copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');"
    ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', '/tmp/composer-setup.php');")"

    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
    then
        >&2 echo 'ERROR: Invalid installer checksum'
        rm /tmp/composer-setup.php
        exit 1
    fi

    php /tmp/composer-setup.php
    RESULT=$?
    rm /tmp/composer-setup.php
    mv composer.phar bin/composer
    exit $RESULT
;;

# @see https://deployer.org
"deployer")
	curl -L https://github.com/deployphp/deployer/releases/download/v7.0.2/deployer.phar -o bin/deployer
	chmod a+x bin/deployer
;;

# @see https://kint-php.github.io
"kint")
	curl -L https://raw.githubusercontent.com/kint-php/kint/master/build/kint.phar -o bin/kint
	chmod a+x bin/kint
;;

# @see https://github.com/nvm-sh/nvm
# As nvm is a sourced function(), not a shell script, it can be used anywhere without alias
# Then run "nvm install node"
"nvm")
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
	source "$HOME/.nvm/nvm.sh" && source "$HOME/.nvm/bash_completion"
;;

# We must install "bin/install nvm" before
# @see https://www.npmjs.com
"npm")
	nvm install-latest-npm
;;

"node")
	volta install node
;;

# @see https://phing.info
"phing")
	curl -LO https://www.phing.info/get/phing-2.17.4.phar
	curl -LO https://www.phing.info/get/phing-2.17.4.phar.sha512
	sha512sum --check phing-2.17.4.phar.sha512
	rm phing-2.17.4.phar.sha512
	mv phing-2.17.4.phar bin/phing
	chmod +x bin/phing
;;

# PHAR Installation and Verification Environment
# @see https://phar.io
"phive")
	apt update && apt install -y gpg
	curl -L "https://phar.io/releases/phive.phar" -o phive.phar
	curl -L "https://phar.io/releases/phive.phar.asc" -o /tmp/phive.phar.asc 
	gpg --keyserver hkps://keys.openpgp.org --recv-keys 0x6AF725270AB81E04D79442549D8A98B29B2D5D79
	gpg --verify /tmp/phive.phar.asc phive.phar
	rm /tmp/phive.phar.asc
	chmod +x phive.phar
	mv phive.phar /usr/local/bin/phive
;;

# @see https://docs.volta.sh
"volta")
	curl https://get.volta.sh | bash
;;

#########################
# SPECIFIC INSTALL      #
# Not included in 'all' #
#########################

# @see https://github.com/krakjoe/pcov
"pcov")
	pecl install pcov && docker-php-ext-enable pcov
;;

# @see https://github.com/phpenv/phpenv
"phpenv")
	curl -L https://raw.githubusercontent.com/phpenv/phpenv-installer/master/bin/phpenv-installer | bash
;;

# @see https://www.phpliteadmin.org
"phplite")
	wget https://bitbucket.org/phpliteadmin/public/downloads/phpLiteAdmin_v1-9-8-2.zip -O phpLiteAdmin_v1-9-8-2.zip
	unzip phpLiteAdmin_v1-9-8-2.zip
;;

# @see https://github.com/JetBrains
"stubs")
	git clone https://github.com/JetBrains/phpstorm-stubs.git vendor/jetbrains/phpstorm-stubs
;;

# @see https://symfony.com/download
"symfony")
	curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | bash
	apt install -y symfony-cli
;;

#############
# STRUCTURE #
#############

"structure")
	mkdir -p ../shared	
	mkdir -p ./var 		    && mv ./var ../shared/ 		    && ln -s ../shared/var ./var
	mkdir -p ./vendor       && mv ./vendor ../shared/       && ln -s ../shared/vendor ./vendor
	mkdir -p ./node_modules && mv ./node_modules ../shared/ && ln -s ../shared/node_modules ./node_modules
;;

#######
# SSH #
#######
"ssh-memo")
	echoinfo "Use following to create an ed25519 ssh key:"
	echo -e "apt update && apt install -y ssh"
	echo -e 'ssh-keygen -t ed25519 -C "your_email@example.com"'
	echo 'eval "$$(ssh-agent -s)"'
	echo "ssh-add ~/.ssh/id_ed25519"
	echoinfo "Use following to send an ssh key on remote host:"
	echo -e "ssh-copy-id -i ~/.ssh/id_ed25519.pub user@remote-host.com \n"
;;

esac
#!/usr/bin/env bash

if [ $# -lt 1 ]; then echo "Usage : $0 <script-name>"; exit; fi

ARGUMENT=$2
ARGUMENT2=$3
ARGUMENT3=$4

echogood () {
	echo -e "\033[1;32m------------\n- All good -\n------------\033[0m"
}

echoinfo () {
	echo -e "\033[1;33m$1\033[0m"
}

##########################
# Php Quality Assurance  #
#  @see https://phpqa.io #
##########################

case "$1" in

"all") $0 lints && $0 tests ;;

############
# BEHAVIOR #
############

"all-behav"|"all-behaviors")
	$0 behat &&
	$0 cept &&
	$0 spec &&
	echogood
;;

# @see https://docs.behat.org
"behat")	
	echoinfo "Running Behat"
#	@[ -f features/bootstrap/FeatureContext.php ] || bin/behat --init
	bin/behat -c behat.yml ;;

# @see https://codeception.com
"cept"|"codecept")
	echoinfo "Running Codeception"
	bin/codecept run -c tools/test/codeception.yml ;;

# @see http://phpspec.net
# Can use Phpdbg: phpdbg -qrr phpspec run
"spec"|"phpspec")
	echoinfo "Running Phpspec"
	bin/phpspec run --config=tools/test/phpspec.yml ${ARGUMENT} ;;
"desc"|"spec-desc")
	echoinfo "Usage: bin/run desc App/Namespace/Class/Generated"
	bin/phpspec desc --config=tools/test/phpspec.yml ${ARGUMENT} ;;

##########
# FIXERS #
# Please use one or other to avoid conflicts
##########

# @see https://cs.symfony.com
"fix"|"csfixer")
	echoinfo "Running Symfony CsFixer"
	bin/php-cs-fixer --config=tools/linter/.php-cs-fixer.php -v fix ;;

# @see https://github.com/squizlabs/PHP_CodeSniffer
"cbf")
	echoinfo "Running Phpcbf"
	bin/phpcbf --colors --standard=tools/linter/phpcs.xml -v ;;

###########
# LINTERS #
###########

"lints"|"linters"|"all-lints")
	$0 paralint &&
	$0 cpd &&
	$0 cs &&
	$0 md &&
	$0 stan &&
	# $0 phan && $0 psalm
	echogood
;;

# @see https://github.com/php-parallel-lint/PHP-Parallel-Lint
"paralint")
	echoinfo "Running Paralint"
	bin/parallel-lint src --exclude vendor ;;

# @see https://github.com/sebastianbergmann/phpcpd
"cpd"|"phpcpd")
	echoinfo "Running Phpcpd"
	bin/phpcpd src ;;

# @see https://squizlabs.github.io/HTML_CodeSniffer
"cs"|"phpcs")
	echoinfo "Running Phpcs"	
	bin/phpcs --colors --standard=tools/linter/phpcs.xml -s ;;

# @see https://phpmd.org
"md"|"phpmd")
	echoinfo "Running Phpmd"
	php -derror_reporting=24575 bin/phpmd src ansi tools/linter/phpmd.xml --reportfile=STDOUT ;;

# @see https://phpstan.org
"stan"|"phpstan")
	echoinfo "Running Phpstan"
	bin/phpstan analyse --level 8 --configuration tools/linter/phpstan.neon --memory-limit 2G ;;

# Caution: can be slow !
# @see https://github.com/phan/phan/wiki
# --allow-polyfill-parser avoid to use ast-ext
"phan")
	echoinfo "Running Phan"
	PHAN_ALLOW_XDEBUG=0 bin/phan --config-file tools/linter/phan.config.php --allow-polyfill-parser ;;

# Caution: can be slow !
# @see https://psalm.dev
"psalm")
	echoinfo "Running Psalm"
	bin/psalm -c tools/linter/psalm.xml --memory-limit=2G --threads=4 ;;

###########
# TESTING #
###########


# $0 infection && # TAKE TO MUCH DEV TIME !
"tests"|"all-tests")
	$0 cover &&
	$0 deptrac &&
	$0 paratest && 	 # Run like pest or phpunit
	echogood
;;

"itests")
	$0 cover &&
	$0 deptrac &&
	$0 iunit &&
	echogood
;;

# @see https://phpunitgen.io
"gen")
    bin/phpunitgen --config=tools/test/phpunitgen.yml ${ARGUMENT} ;;

# Specifics

"cover"|"coverage")
	echoinfo "Running Coverage"
	echoinfo "You must install pcov, phpdbg or xdebug to use code coverage\n"
	php -derror_reporting=24575 -dpcov.enabled=1 bin/phpunit -c tools/test/phpunit.xml --coverage-text -- tests 
    # XDEBUG_MODE=coverage bin/phpunit -c tools/test/phpunit.xml --coverage-html=var/unit-coverage
    # phpdbg -qrr bin/phpunit -c phpunit.xml --coverage-html var/unit-coverage
;;

"cover-html")
	echoinfo "Running Coverage"
	echoinfo "You must install pcov, phpdbg or xdebug to use code coverage\n"
	php -derror_reporting=24575 -dpcov.enabled=1 bin/phpunit -c tools/test/phpunit.xml --coverage-html public/coverage
    # XDEBUG_MODE=coverage bin/phpunit -c tools/test/phpunit.xml --coverage-html=var/unit-coverage
    # phpdbg -qrr bin/phpunit -c phpunit.xml --coverage-html var/unit-coverage
;;

# @see https://qossmic.github.io/deptrac
"deptrac")
	echoinfo "Running Deptrac"
	bin/deptrac analyse --config-file=tools/test/deptrac.yaml --cache-file=./var/.deptrac.cache --report-uncovered;;

"deptrac-img")
	echoinfo "Running Deptrac image"
	bin/deptrac analyse --config-file=tools/test/deptrac.yaml -f graphviz-image --output project/archi_deptrac.jpg;;

# @see https://infection.github.io
# -derror_reporting=24575 (E_ALL & ~E_DEPRECATED)
"infection")
	echoinfo "Running Infection"
	echoinfo "You must install pcov, phpdbg or xdebug to use infection"
	test -d /tmp/infection || mkdir /tmp/infection
	test -f /tmp/infection/index.xml || touch /tmp/infection/index.xml
	php -derror_reporting=24575 bin/infection run -c tools/test/infection.json --debug --show-mutations
;;

# @see https://github.com/paratestphp/paratest
"para"|"paratest")
	echoinfo "Running Paratest"
    bin/paratest -c tools/test/phpunit.xml ${ARGUMENT} ;;

# @see https://pestphp.com
"pest")
	echoinfo "Running Pest"
    bin/pest -c tools/test/phpunit.xml ${ARGUMENT} ;;

# @see https://phpunit.readthedocs.io
"unit"|"phpunit")
	echoinfo "Running Phpunit"
    bin/phpunit -c tools/test/phpunit.xml ${ARGUMENT} ${ARGUMENT2} ${ARGUMENT3};;
"funit"|"ftest")
	echoinfo "Running Phpunit functional"
    bin/phpunit -c tools/test/phpunit.xml --group functional ${ARGUMENT} ;;
"iunit"|"itest")
	echoinfo "Running Phpunit integration (action)"
    bin/phpunit --debug -c tools/test/phpunit.xml --group integration ${ARGUMENT} ;;

##########################################################

############
# BUILDING #
############

"build")
	npm i && npm run build ;;

# @see https://symfony.com/bundles/EasyAdminBundle/current/design.html
"build-assets")
	bin/console assets:install --symlink ;;

"dev"|"watch")
	npm i && npm run watch ;;

"var")
	rm var/cache/* -rf
;;

"cache")
	bin/console cache:clear
;;

"migrate")
	bin/console doctrine:migrations:migrate --allow-no-migration --em=default
;;

"db"|"database"|"databases")
	bin/console doctrine:schema:update --force --complete --em=default
	bin/console doctrine:schema:update --force --complete --em=sqlite
;;

"db-test")
	rm var/data_test.db && cp var/data.db var/data_test.db && echo "-ok-"
;;

"dump"|"auto")
	bin/composer dump-autoload
;;

# MySql default
"drop-warning")
	bin/console doctrine:schema:drop --force --em=default
	bin/console doctrine:query:sql "DROP TABLE IF EXISTS sessions"
;;

"varcache")
	$0 var && $0 cache
;;

# @see https://deployer.org
"deploy")
	bin/deployer deploy -f tools/deployer.yaml -vvv ;;

# @see https://www.phing.info
"phing")
	bin/phing -f tools/build.xml ;;

###########
# GRUMPHP #
# @see https://github.com/phpro/grumphp
###########

"grump"|"grumphp")
	if [ ! -z ${ARGUMENT} ]; then
		echo "Run task ${ARGUMENT}"
		php -derror_reporting=24575 bin/grumphp run --tasks=${ARGUMENT};
	else 
		php -derror_reporting=24575 bin/grumphp run
	fi
;;

###

*) echo "Command \"$1\" not found!" ;;

esac
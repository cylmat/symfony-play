#!/usr/bin/env bash

if [ $# -lt 1 ]; then echo "Usage : $0 <script-name>"; exit; fi

ARGUMENT=$2

echogood () {
	echo -e "\033[1;32m------------\n- All good -\n------------\033[0m"
}

echoinfo () {
	echo -e "\033[1;33m$1\033[0m"
}

##########################
# Php Quality Assurance  #
#  @see https://phpqa.io #
##########################

case "$1" in

############
# BEHAVIOR #
############

"all-behav"|"all-behaviors")
	$0 behat &&
	$0 cept &&
	$0 spec &&
	echogood
;;

# @see https://docs.behat.org
"behat")	
	echoinfo "Running Behat"
#	@[ -f features/bootstrap/FeatureContext.php ] || bin/behat --init
	bin/behat -c behat.yml ;;

# @see https://codeception.com
"cept"|"codecept")
	echoinfo "Running Codeception"
	bin/codecept run -c tools/test/codeception.yml ;;

# @see http://phpspec.net
# Can use Phpdbg: phpdbg -qrr phpspec run
"spec"|"phpspec")
	echoinfo "Running Phpspec"
	bin/phpspec run --config=tools/test/phpspec.yml ${ARGUMENT} ;;
"desc"|"spec-desc")
	echoinfo "Usage: bin/run desc App/Namespace/Class/Generated"
	bin/phpspec desc --config=tools/test/phpspec.yml ${ARGUMENT} ;;

##########
# FIXERS #
# Please use one or other to avoid conflicts
##########

# @see https://cs.symfony.com
"fix"|"csfixer")
	echoinfo "Running Symfony CsFixer"
	bin/php-cs-fixer --config=tools/linter/.php-cs-fixer.php -v fix ;;

# @see https://github.com/squizlabs/PHP_CodeSniffer
"cbf")
	echoinfo "Running Phpcbf"
	bin/phpcbf --colors --standard=tools/linter/phpcs.xml -v ;;

###########
# LINTERS #
###########

"lint"|"lints"|"linters"|"all-lints")
	$0 paralint &&
	$0 cpd &&
	$0 cs &&
	$0 md &&
	$0 stan &&
	# $0 phan && $0 psalm
	echogood
;;

# @see https://github.com/php-parallel-lint/PHP-Parallel-Lint
"paralint")
	echoinfo "Running Paralint"
	bin/parallel-lint src --exclude vendor ;;

# @see https://github.com/sebastianbergmann/phpcpd
"cpd"|"phpcpd")
	echoinfo "Running Phpcpd"
	bin/phpcpd src ;;

# @see https://squizlabs.github.io/HTML_CodeSniffer
"cs"|"phpcs")
	echoinfo "Running Phpcs"	
	bin/phpcs --colors --standard=tools/linter/phpcs.xml -s ;;

# @see https://phpmd.org
"md"|"phpmd")
	echoinfo "Running Phpmd"
	php -derror_reporting=24575 bin/phpmd src ansi tools/linter/phpmd.xml --reportfile=STDOUT ;;

# @see https://phpstan.org
"stan"|"phpstan")
	echoinfo "Running Phpstan"
	bin/phpstan analyse --level 8 --configuration tools/linter/phpstan.neon --memory-limit 2G ;;

# Caution: can be slow !
# @see https://github.com/phan/phan/wiki
# --allow-polyfill-parser avoid to use ast-ext
"phan")
	echoinfo "Running Phan"
	PHAN_ALLOW_XDEBUG=0 bin/phan --config-file tools/linter/phan.config.php --allow-polyfill-parser ;;

# Caution: can be slow !
# @see https://psalm.dev
"psalm")
	echoinfo "Running Psalm"
	bin/psalm -c tools/linter/psalm.xml --memory-limit=2G --threads=4 ;;

###########
# TESTING #
###########

"tests"|"all-tests")
	$0 cover &&
	$0 deptrac &&
	$0 infection &&
	$0 paratest && # Run like pest or phpunit
	echogood
;;

# @see https://phpunitgen.io
"gen"|"test-gen")
    bin/phpunitgen --config=tools/test/phpunitgen.yml src ;;

# Specifics

"cover"|"coverage")
	echoinfo "You must install pcov, phpdbg or xdebug to use code coverage\n"
	php -dpcov.enabled=1 bin/phpunit -c tools/test/phpunit.xml --coverage-text tests
    # XDEBUG_MODE=coverage bin/phpunit -c tools/test/phpunit.xml --coverage-html=var/unit-coverage
    # phpdbg -qrr bin/phpunit -c phpunit.xml --coverage-html var/unit-coverage
;;

# @see https://qossmic.github.io/deptrac
"deptrac")
	echoinfo "Running Deptrac"
	bin/deptrac analyse --config-file=tools/test/deptrac.yaml --cache-file=./var/.deptrac.cache ;;

# @see https://infection.github.io
# -derror_reporting=24575 remove deprecated
"infection")
	echoinfo "Running Infection"
	echoinfo "You must install pcov, phpdbg or xdebug to use infection"
	test -d /tmp/infection || mkdir /tmp/infection
	test -f /tmp/infection/index.xml || touch /tmp/infection/index.xml
	php -derror_reporting=24575 bin/infection run -c tools/test/infection.json --debug --show-mutations
;;

# @see https://github.com/paratestphp/paratest
"para"|"paratest")
	echoinfo "Running Paratest"
    bin/paratest -c tools/test/phpunit.xml ${ARGUMENT} ;;

# @see https://pestphp.com
"pest")
	echoinfo "Running Pest"
    bin/pest -c tools/test/phpunit.xml ${ARGUMENT} ;;

# @see https://phpunit.readthedocs.io
"unit"|"phpunit")
	echoinfo "Running Phpunit"
    bin/phpunit -v -c tools/test/phpunit.xml ${ARGUMENT} ;;
"funit")
	echoinfo "Running Phpunit functional"
    bin/phpunit -v -c tools/test/phpunit.xml --group functional ${ARGUMENT} ;;

##########################################################

############
# BUILDING #
############

"build")
	npm run build ;;

"watch")
	npm run watch ;;

"cache")
	rm var/cache/* -rf
	bin/console cache:clear
;;

# @see https://deployer.org
"deploy")
	bin/deployer deploy -f tools/deployer.yaml -vvv ;;

# @see https://www.phing.info
"phing")
	bin/phing -f tools/build.xml ;;

###########
# GRUMPHP #
# @see https://github.com/phpro/grumphp
###########

"grump"|"grumphp")
	if [ ! -z ${ARGUMENT} ]; then
		echo "Run task ${ARGUMENT}"
		php -derror_reporting=24575 bin/grumphp run --tasks=${ARGUMENT};
	else 
		php -derror_reporting=24575 bin/grumphp run
	fi
;;

#############
# STRUCTURE #
#############

"structure")
	mkdir -p ../shared	
	mkdir -p ./var 		    && mv ./var ../shared/ 		    && ln -s ../shared/var ./var
	mkdir -p ./vendor       && mv ./vendor ../shared/       && ln -s ../shared/vendor ./vendor
	mkdir -p ./node_modules && mv ./node_modules ../shared/ && ln -s ../shared/node_modules ./node_modules
;;

#######
# SSH #
#######
"ssh-memo")
	echoinfo "Use following to create an ed25519 ssh key:"
	echo -e "apt update && apt install -y ssh"
	echo -e 'ssh-keygen -t ed25519 -C "your_email@example.com"'
	echo 'eval "$$(ssh-agent -s)"'
	echo "ssh-add ~/.ssh/id_ed25519"
	echoinfo "Use following to send an ssh key on remote host:"
	echo -e "ssh-copy-id -i ~/.ssh/id_ed25519.pub user@remote-host.com \n"
;;

###

*) echo "Command \"$1\" not found!" ;;

esac
doctrine schema+migrations on mysql+sqlite + fixtures
set logger in domain/service
doctrine decorator instead of appdoctrine
use snc/redis-bundle
use FOS\UserBundle\FOSUserBundle
redismodel dto + factory

use multiple databases
use postgre/mongodb
https://sentry.io
https://newrelic.com

* normalizer de responses (response object -> normalizer: array)
use Nelmio\ApiDocBundle\Annotation\Model;
"nelmio/api-doc-bundle": "^4.12",
use OpenApi\Attributes as OA;

---------------------
* wrap json_encode 500 si error formattage (utilisation d'un json encoder à la place)
    $encoder = try serializer.encoder.json ?? new JsonEncoder
    $this->jsonEncoder->decode($data, JsonEncoder::FORMAT, [JsonDecode::ASSOCIATIVE => true]);

* redis lock (faire tourner un "set" redis jusqu'à obtention) -> RedisSessionHandler
    Snc/redisbundle
    for(0>11) redis->set(...) if(success) $this->locked=true; 

* enlever le "app" controller vers "bundle" controller :
création de route/contrôleurs spécifiques pour les api (chaque route en class invokable)

#[Route(path: '/api/code',name: 'api_code',methods: 'POST',)]
final class ApiCodeRoute extends AbstractController  { __invoke(): JsonResponse }

---------------------
Opendata: https://www.data.gouv.fr https://opendata.paris.fr https://data.europa.eu
declare(strict_types=1)
custom normaliser for response
decorator stack
logs in database
wsl traefik.io
xml
https://github.com/rectorphp/rector
https://themer.dev
let's encrypt, openio.io, min.io, openswift, openstack, traefik, messageoriented middleware
https://tideways.com/profiler/features
cqrs
squid-cache.org
design pattern: memory in encryptdata class
fiber
use Liip\ImagineBundle
use fosuserbundle
cache with apcu
serialize data
tests for AppBundle
weakobject
https://www.sonarqube.org
https://www.elastic.co/fr/what-is/elk-stack
https://www.blackfire.io
https://phpinsights.com
https://www.cloudamqp.com
https://www.elephantsql.com
https://app.redislabs.com
http://jmsyst.com/libs/serializer
https://docs.phpdoc.org/guide/guides/docblocks.html
PCRE + Parle (or doctrine parse)
runtime
FOSUserBundle
